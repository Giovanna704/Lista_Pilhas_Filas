//Pilha com Lista Encadeada: Implemente uma pilha dinamicamente usando uma lista encadeada.
#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    int dado;
    struct No* prox;
} No;

typedef struct {
    No* topo;
} Pilha;

void inicializar(Pilha* p) {
    p->topo = NULL;
}

int esta_vazia(Pilha* p) {
    return p->topo == NULL;
}

void push(Pilha* p, int valor) {
    No* novo = (No*)malloc(sizeof(No));
    novo->dado = valor;
    novo->prox = p->topo;
    p->topo = novo;
}

int pop(Pilha* p, int* valor) {
    if (esta_vazia(p)) {
        return 0;
    }
    No* temp = p->topo;
    *valor = temp->dado;
    p->topo = temp->prox;
    free(temp);
    return 1;
}

int topo(Pilha* p, int* valor) {
    if (esta_vazia(p)) {
        return 0;
    }
    *valor = p->topo->dado;
    return 1;
}

void liberar(Pilha* p) {
    No* atual = p->topo;
    while (atual != NULL) {
        No* temp = atual;
        atual = atual->prox;
        free(temp);
    }
    p->topo = NULL;
}

int main() {
    Pilha p;
    inicializar(&p);

    push(&p, 10);
    push(&p, 20);
    push(&p, 30);

    int valor;
    topo(&p, &valor);
    printf("Topo: %d\n", valor);

    while (!esta_vazia(&p)) {
        pop(&p, &valor);
        printf("Desempilhado: %d\n", valor);
    }

    liberar(&p);

    return 0;
}
