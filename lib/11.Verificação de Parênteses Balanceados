//11.Verificação de Parênteses Balanceados: Escreva uma função verificar_balanceamento que retorne 1 se a string de entrada (ex: "({[]})") for válida.
#include <stdio.h>
#include <string.h>

#define TAMANHO 100

typedef struct {
    char dados[TAMANHO];
    int topo;
} Pilha;

void inicializar(Pilha* p) {
    p->topo = -1;
}

int esta_vazia(Pilha* p) {
    return p->topo == -1;
}

int push(Pilha* p, char valor) {
    if (p->topo == TAMANHO - 1) {
        return 0;
    }
    p->dados[++p->topo] = valor;
    return 1;
}

int pop(Pilha* p, char* valor) {
    if (esta_vazia(p)) {
        return 0;
    }
    *valor = p->dados[p->topo--];
    return 1;
}

char topo(Pilha* p) {
    if (esta_vazia(p)) {
        return '\0';
    }
    return p->dados[p->topo];
}

int verificar_balanceamento(const char* expressao) {
    Pilha p;
    inicializar(&p);

    for (int i = 0; expressao[i] != '\0'; i++) {
        char c = expressao[i];

        if (c == '(' || c == '{' || c == '[') {
            push(&p, c);
        } else if (c == ')' || c == '}' || c == ']') {
            if (esta_vazia(&p)) {
                return 0;
            }

            char topoPilha = topo(&p);
            if ((c == ')' && topoPilha == '(') ||
                (c == '}' && topoPilha == '{') ||
                (c == ']' && topoPilha == '[')) {
                char temp;
                pop(&p, &temp);
            } else {
                return 0;
            }
        }
    }

    return esta_vazia(&p);
}

int main() {
    char expressao[100];

    printf("Digite a expressao: ");
    scanf("%s", expressao);

    if (verificar_balanceamento(expressao)) {
        printf("Expressao balanceada.\n");
    } else {
        printf("Expressao NAO balanceada.\n");
    }

    return 0;
}
