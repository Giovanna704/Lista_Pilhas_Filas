//27.Fila usando Duas Pilhas: Implemente uma fila usando duas pilhas e analise a complexidade de tempo das operações.

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int arr[MAX];
    int topo;
} Pilha;

void inicializar(Pilha *p) {
    p->topo = -1;
}

int esta_vazia(Pilha *p) {
    return p->topo == -1;
}

void push(Pilha *p, int val) {
    if (p->topo < MAX - 1)
        p->arr[++(p->topo)] = val;
}

int pop(Pilha *p) {
    if (!esta_vazia(p))
        return p->arr[(p->topo)--];
    return -1;
}

int topo(Pilha *p) {
    if (!esta_vazia(p))
        return p->arr[p->topo];
    return -1;
}

typedef struct {
    Pilha entrada;
    Pilha saida;
} FilaDuasPilhas;

void inicializar_fila(FilaDuasPilhas *f) {
    inicializar(&f->entrada);
    inicializar(&f->saida);
}

void enfileirar(FilaDuasPilhas *f, int val) {
    push(&f->entrada, val);
}

int desenfileirar(FilaDuasPilhas *f) {
    if (esta_vazia(&f->saida)) {
        while (!esta_vazia(&f->entrada)) {
            push(&f->saida, pop(&f->entrada));
        }
    }
    return pop(&f->saida);
}

int frente(FilaDuasPilhas *f) {
    if (esta_vazia(&f->saida)) {
        while (!esta_vazia(&f->entrada)) {
            push(&f->saida, pop(&f->entrada));
        }
    }
    return topo(&f->saida);
}

int main() {
    FilaDuasPilhas fila;
    inicializar_fila(&fila);

    enfileirar(&fila, 1);
    enfileirar(&fila, 2);
    enfileirar(&fila, 3);

    printf("%d\n", desenfileirar(&fila));
    printf("%d\n", frente(&fila));
    printf("%d\n", desenfileirar(&fila));
    printf("%d\n", desenfileirar(&fila));

    return 0;
}
