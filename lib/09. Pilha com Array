#include <stdio.h>

#define TAMANHO 100

typedef struct {
    int dados[TAMANHO];
    int topo;
} Pilha;

void inicializar(Pilha* p) {
    p->topo = -1;
}

int esta_vazia(Pilha* p) {
    return p->topo == -1;
}

int push(Pilha* p, int valor) {
    if (p->topo == TAMANHO - 1) {
        return 0;
    }
    p->topo++;
    p->dados[p->topo] = valor;
    return 1;
}

int pop(Pilha* p, int* valor) {
    if (esta_vazia(p)) {
        return 0;
    }
    *valor = p->dados[p->topo];
    p->topo--;
    return 1;
}
//Pilha com Array: Implemente uma pilha usando um array de tamanho fixo (ex: int pilha[100]).Funções: push, pop, topo, esta_vazia.

int topo(Pilha* p, int* valor) {
    if (esta_vazia(p)) {
        return 0;
    }
    *valor = p->dados[p->topo];
    return 1;
}

int main() {
    Pilha p;
    inicializar(&p);

    push(&p, 10);
    push(&p, 20);
    push(&p, 30);

    int valor;
    topo(&p, &valor);
    printf("Topo: %d\n", valor);

    while (!esta_vazia(&p)) {
        pop(&p, &valor);
        printf("Desempilhado: %d\n", valor);
    }

    return 0;
}
