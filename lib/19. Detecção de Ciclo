/*
19.Detecção de Ciclo (Algoritmo de Floyd):
- Implemente uma função detectar_ciclo que retorne 1 se houver um ciclo na lista.
*/

#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    int dado;
    struct No* prox;
} No;

No* criar_no(int valor) {
    No* novo = (No*)malloc(sizeof(No));
    novo->dado = valor;
    novo->prox = NULL;
    return novo;
}

void inserir_fim(No** lista, int valor) {
    No* novo = criar_no(valor);
    if (*lista == NULL) {
        *lista = novo;
        return;
    }
    No* temp = *lista;
    while (temp->prox != NULL) {
        temp = temp->prox;
    }
    temp->prox = novo;
}

int detectar_ciclo(No* lista) {
    No* lento = lista;
    No* rapido = lista;

    while (rapido != NULL && rapido->prox != NULL) {
        lento = lento->prox;
        rapido = rapido->prox->prox;
        if (lento == rapido) {
            return 1;
        }
    }
    return 0;
}

void exibir_lista(No* lista) {
    No* temp = lista;
    printf("Lista: ");
    while (temp != NULL) {
        printf("%d ", temp->dado);
        temp = temp->prox;
    }
    printf("\n");
}

int main() {
    No* lista = NULL;

    inserir_fim(&lista, 1);
    inserir_fim(&lista, 2);
    inserir_fim(&lista, 3);
    inserir_fim(&lista, 4);
    inserir_fim(&lista, 5);

    printf("Tem ciclo? %d\n", detectar_ciclo(lista)); // Espera 0 (não tem ciclo)

    // Criando ciclo manualmente (5 -> 3)
    No* temp = lista;
    No* terceiro = NULL;
    while (temp->prox != NULL) {
        if (temp->dado == 3) {
            terceiro = temp;
        }
        temp = temp->prox;
    }
    temp->prox = terceiro; // Cria ciclo

    printf("Tem ciclo? %d\n", detectar_ciclo(lista)); // Espera 1 (tem ciclo)

    return 0;
}
