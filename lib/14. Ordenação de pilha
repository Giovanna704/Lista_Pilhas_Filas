//14.Ordenação de Pilha:Implemente uma função ordenar_pilha que ordene uma pilha usando uma segunda pilha como auxiliar.

#include <stdio.h>

#define TAMANHO 100

typedef struct {
    int dados[TAMANHO];
    int topo;
} Pilha;

void inicializar(Pilha* p) {
    p->topo = -1;
}

int esta_vazia(Pilha* p) {
    return p->topo == -1;
}

int push(Pilha* p, int valor) {
    if (p->topo == TAMANHO - 1) {
        return 0;
    }
    p->dados[++p->topo] = valor;
    return 1;
}

int pop(Pilha* p, int* valor) {
    if (esta_vazia(p)) {
        return 0;
    }
    *valor = p->dados[p->topo--];
    return 1;
}

int topo(Pilha* p) {
    if (esta_vazia(p)) {
        return -1;
    }
    return p->dados[p->topo];
}

void ordenar_pilha(Pilha* p) {
    Pilha aux;
    inicializar(&aux);

    int temp;

    while (!esta_vazia(p)) {
        pop(p, &temp);

        while (!esta_vazia(&aux) && topo(&aux) > temp) {
            int val;
            pop(&aux, &val);
            push(p, val);
        }

        push(&aux, temp);
    }

    while (!esta_vazia(&aux)) {
        int val;
        pop(&aux, &val);
        push(p, val);
    }
}

void exibir(Pilha* p) {
    for (int i = 0; i <= p->topo; i++) {
        printf("%d ", p->dados[i]);
    }
    printf("\n");
}

int main() {
    Pilha p;
    inicializar(&p);

    push(&p, 3);
    push(&p, 1);
    push(&p, 4);
    push(&p, 2);
    push(&p, 5);

    printf("Pilha antes de ordenar: ");
    exibir(&p);

    ordenar_pilha(&p);

    printf("Pilha apos ordenar: ");
    exibir(&p);

    return 0;
}
