//13. Verificação de Palíndromo: Implemente uma função que use uma pilha para verificar se uma string é um palíndromo (ex: "radar").
#include <stdio.h>
#include <string.h>

#define TAMANHO 100

typedef struct {
    char dados[TAMANHO];
    int topo;
} Pilha;

void inicializar(Pilha* p) {
    p->topo = -1;
}

int esta_vazia(Pilha* p) {
    return p->topo == -1;
}

int push(Pilha* p, char valor) {
    if (p->topo == TAMANHO - 1) {
        return 0;
    }
    p->dados[++p->topo] = valor;
    return 1;
}

int pop(Pilha* p, char* valor) {
    if (esta_vazia(p)) {
        return 0;
    }
    *valor = p->dados[p->topo--];
    return 1;
}

int verificar_palindromo(const char* str) {
    Pilha p;
    inicializar(&p);

    int tamanho = strlen(str);

    for (int i = 0; i < tamanho; i++) {
        push(&p, str[i]);
    }

    for (int i = 0; i < tamanho; i++) {
        char c;
        pop(&p, &c);
        if (str[i] != c) {
            return 0;
        }
    }

    return 1;
}

int main() {
    char str[100];

    printf("Digite uma string: ");
    scanf("%s", str);

    if (verificar_palindromo(str)) {
        printf("A string é um palindromo.\n");
    } else {
        printf("A string NAO é um palindromo.\n");
    }

    return 0;
}
